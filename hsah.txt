//normal hash
#include<stdio.h>
#include<stdlib.h>
int array[100],n;
void display();
int search();
void insert(int,int);
void delete(int);
void main()
{
 int choice,num;
  n=0;
   while(1)
    {
     printf("1.Insert the element\n");
     printf("2.delete the element \n");
     printf("3.Display all elements \n");
     printf("4.Search the element \n");
     printf("5.Quit \n");
     printf("Enter your choice: ");
     scanf("%d",&choice);
     switch(choice)
     {
     case 1:
     printf("Enter the elemnet to be inserted to the list:");
     scanf("%d",&num);
     insert(num,n);
     n=n+1;
     break;
     case 2:
     printf("Enter the elements to be deleted from the list: ");
     scanf("%d",&num);
     delete(num);
     break;
     case 3:
     display();
     break;
     case 4:
     search();
     break;
     case 5:
     exit(0);
     default:
      printf("Invalid choice \n");
     }
    }
}
void display()
{
 int i;
 if(n==0)
 {
  printf("Heap is empty \n");
  return;
 }
 for(i=0;i<n;i++)
 printf(" %d ",array[i]);
 printf(" \n ");
}
int search()
{
 int i,search,found=0;
 printf("Enter the element to be search: ");
 scanf("%d",&search);
 for(i=0;i<n;i++)
 {
  if(array[i]==search)
  {
   found=1;
   break;
  }
 }
  if(found==1)
  printf("\n Element:%d is found \n",search);
  else
  printf("\n Element: %d is not found \n",search);
  return 1;
 }
 void insert(int num, int location)
 {
 int parentnode;
 while(location > 0)
 {
  parentnode=(location -1)/2;
  if(num>=array[parentnode])
  {
   array[location]=num;
   return;
  }
  array[location]=array[parentnode];
  location=parentnode;
 }
 array[0]=num;
 }
 void delete(int num)
 {
  int left,right,i,temp,parentnode;
  for(i=0;i<num;i++)
  {
   if(num==array[i])
   break;
  }
  if(num!=array[i])
   {
    printf("%d not found in heap list \n",num);
    return;
   }
   array[i]=array[n-1];
   n=n-1;
   parentnode=(i-1)/2;
   if(array[i]<array[parentnode])
   {
    insert(array[i],i);
    return;
   }
   left=2*i+1;
   right=2*i+2;
   while(right<n)
   {
    if
    (array[i]<=array[left]&& array[i]<= array[right])
    return;
    if(array[i]=array[left])
    {
     temp=array[i];
     array[i]=array[left];
     array[left]=temp;
     i=left;
    }
    else
    {
     temp=array[i];
     array[i]=array[right];
     array[right]=temp;
     i=right;
    }
    left=2*i+1;
    right=2*i+2;
   }
   if(left==n-1&&array[i])
   {
    temp=array[i];
    array[i]=array[left];
    array[left]=temp;
   }
}
     
